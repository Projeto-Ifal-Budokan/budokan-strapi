# Multi-stage build for production
FROM node:18-alpine AS build

# Install system dependencies
RUN apk update && apk add --no-cache \
    build-base \
    gcc \
    autoconf \
    automake \
    zlib-dev \
    libpng-dev \
    vips-dev \
    git \
    curl \
    > /dev/null 2>&1

# Set environment
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Set working directory
WORKDIR /opt/

# Copy package files
COPY package.json package-lock.json* ./

# Install node-gyp globally
RUN npm install -g node-gyp

# Install dependencies
RUN npm config set fetch-retry-maxtimeout 600000 -g && \
    npm install --only=production && \
    npm cache clean --force

# Set PATH
ENV PATH=/opt/node_modules/.bin:$PATH

# Set app directory
WORKDIR /opt/app

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    vips-dev \
    curl

# Set environment
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Create app directory
WORKDIR /opt/

# Copy node_modules from build stage
COPY --from=build /opt/node_modules ./node_modules

# Set app directory
WORKDIR /opt/app

# Copy built application from build stage
COPY --from=build /opt/app ./

# Set PATH
ENV PATH=/opt/node_modules/.bin:$PATH

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S strapi -u 1001

# Change ownership
RUN chown -R strapi:nodejs /opt/app

# Switch to non-root user
USER strapi

# Expose port
EXPOSE 1337

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:1337/_health || exit 1

# Start the application
CMD ["npm", "run", "start"]